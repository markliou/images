{
  "ERC721TokenReceiver": {
    "abi": [
      {
        "constant": false,
        "inputs": [
          {
            "name": "_operator",
            "type": "address"
          },
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "onERC721Received",
        "outputs": [
          {
            "name": "",
            "type": "bytes4"
          }
        ],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      }
    ],
    "devdoc": {
      "details": "ERC-721 interface for accepting safe transfers.  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.",
      "methods": {
        "onERC721Received(address,address,uint256,bytes)": {
          "details": "Handle the receipt of a NFT. The ERC721 smart contract calls this function on the recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return of other than the magic value MUST result in the transaction being reverted. Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless throwing.",
          "params": {
            "_data": "Additional data with no specified format.",
            "_from": "The address which previously owned the token.",
            "_operator": "The address which called `safeTransferFrom` function.",
            "_tokenId": "The NFT identifier which is being transferred."
          },
          "return": "Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`."
        }
      }
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "onERC721Received(address,address,uint256,bytes)": "150b7a02"
      }
    },
    "metadata": {
      "compiler": {
        "version": "0.5.6+commit.b259423e"
      },
      "language": "Solidity",
      "output": {
        "abi": [
          {
            "constant": false,
            "inputs": [
              {
                "name": "_operator",
                "type": "address"
              },
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_tokenId",
                "type": "uint256"
              },
              {
                "name": "_data",
                "type": "bytes"
              }
            ],
            "name": "onERC721Received",
            "outputs": [
              {
                "name": "",
                "type": "bytes4"
              }
            ],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          }
        ],
        "devdoc": {
          "details": "ERC-721 interface for accepting safe transfers.  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.",
          "methods": {
            "onERC721Received(address,address,uint256,bytes)": {
              "details": "Handle the receipt of a NFT. The ERC721 smart contract calls this function on the recipient after a `transfer`. This function MAY throw to revert and reject the transfer. Return of other than the magic value MUST result in the transaction being reverted. Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))` unless throwing.",
              "params": {
                "_data": "Additional data with no specified format.",
                "_from": "The address which previously owned the token.",
                "_operator": "The address which called `safeTransferFrom` function.",
                "_tokenId": "The NFT identifier which is being transferred."
              },
              "return": "Returns `bytes4(keccak256(\"onERC721Received(address,address,uint256,bytes)\"))`."
            }
          }
        },
        "userdoc": {
          "methods": {
            "onERC721Received(address,address,uint256,bytes)": {
              "notice": "The contract address is always the message sender. A wallet/broker/auction application MUST implement the wallet interface if it will accept safe transfers."
            }
          }
        }
      },
      "settings": {
        "compilationTarget": {
          "./src/contracts/tokens/erc721-token-receiver.sol": "ERC721TokenReceiver"
        },
        "evmVersion": "byzantium",
        "libraries": {},
        "optimizer": {
          "enabled": false,
          "runs": 200
        },
        "remappings": []
      },
      "sources": {
        "./src/contracts/tokens/erc721-token-receiver.sol": {
          "keccak256": "0xe0e55177d05bc12be9fa851a6382eaa2c6b2f097e53e86a852bdcdb2a11b7c6d",
          "urls": [
            "bzzr://e5df87609151ff5dc6b7d17f1fd54139c580029075f9dc88f359280269029e25"
          ]
        }
      },
      "version": 1
    },
    "userdoc": {
      "methods": {
        "onERC721Received(address,address,uint256,bytes)": {
          "notice": "The contract address is always the message sender. A wallet/broker/auction application MUST implement the wallet interface if it will accept safe transfers."
        }
      }
    }
  }
}