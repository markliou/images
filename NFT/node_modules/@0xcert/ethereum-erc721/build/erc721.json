{
  "ERC721": {
    "abi": [
      {
        "constant": true,
        "inputs": [
          {
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "getApproved",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_approved",
            "type": "address"
          },
          {
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "approve",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "transferFrom",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "ownerOf",
        "outputs": [
          {
            "name": "",
            "type": "address"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          }
        ],
        "name": "balanceOf",
        "outputs": [
          {
            "name": "",
            "type": "uint256"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_operator",
            "type": "address"
          },
          {
            "name": "_approved",
            "type": "bool"
          }
        ],
        "name": "setApprovalForAll",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": false,
        "inputs": [
          {
            "name": "_from",
            "type": "address"
          },
          {
            "name": "_to",
            "type": "address"
          },
          {
            "name": "_tokenId",
            "type": "uint256"
          },
          {
            "name": "_data",
            "type": "bytes"
          }
        ],
        "name": "safeTransferFrom",
        "outputs": [],
        "payable": false,
        "stateMutability": "nonpayable",
        "type": "function"
      },
      {
        "constant": true,
        "inputs": [
          {
            "name": "_owner",
            "type": "address"
          },
          {
            "name": "_operator",
            "type": "address"
          }
        ],
        "name": "isApprovedForAll",
        "outputs": [
          {
            "name": "",
            "type": "bool"
          }
        ],
        "payable": false,
        "stateMutability": "view",
        "type": "function"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "_from",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "_to",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "Transfer",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "_owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "_approved",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "_tokenId",
            "type": "uint256"
          }
        ],
        "name": "Approval",
        "type": "event"
      },
      {
        "anonymous": false,
        "inputs": [
          {
            "indexed": true,
            "name": "_owner",
            "type": "address"
          },
          {
            "indexed": true,
            "name": "_operator",
            "type": "address"
          },
          {
            "indexed": false,
            "name": "_approved",
            "type": "bool"
          }
        ],
        "name": "ApprovalForAll",
        "type": "event"
      }
    ],
    "devdoc": {
      "details": "ERC-721 non-fungible token standard.  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.",
      "methods": {
        "approve(address,uint256)": {
          "details": "Set or reaffirm the approved address for an NFT.",
          "params": {
            "_approved": "The new approved NFT controller.",
            "_tokenId": "The NFT to approve."
          }
        },
        "balanceOf(address)": {
          "details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
          "params": {
            "_owner": "Address for whom to query the balance."
          },
          "return": "Balance of _owner."
        },
        "getApproved(uint256)": {
          "details": "Get the approved address for a single NFT.",
          "params": {
            "_tokenId": "The NFT to find the approved address for."
          },
          "return": "Address that _tokenId is approved for. "
        },
        "isApprovedForAll(address,address)": {
          "details": "Returns true if `_operator` is an approved operator for `_owner`, false otherwise.",
          "params": {
            "_operator": "The address that acts on behalf of the owner.",
            "_owner": "The address that owns the NFTs."
          },
          "return": "True if approved for all, false otherwise."
        },
        "ownerOf(uint256)": {
          "details": "Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.",
          "params": {
            "_tokenId": "The identifier for an NFT."
          },
          "return": "Address of _tokenId owner."
        },
        "safeTransferFrom(address,address,uint256)": {
          "details": "Transfers the ownership of an NFT from one address to another address.",
          "params": {
            "_from": "The current owner of the NFT.",
            "_to": "The new owner.",
            "_tokenId": "The NFT to transfer."
          }
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "details": "Transfers the ownership of an NFT from one address to another address.",
          "params": {
            "_data": "Additional data with no specified format, sent in call to `_to`.",
            "_from": "The current owner of the NFT.",
            "_to": "The new owner.",
            "_tokenId": "The NFT to transfer."
          }
        },
        "setApprovalForAll(address,bool)": {
          "details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.",
          "params": {
            "_approved": "True if the operators is approved, false to revoke approval.",
            "_operator": "Address to add to the set of authorized operators."
          }
        },
        "transferFrom(address,address,uint256)": {
          "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.",
          "params": {
            "_from": "The current owner of the NFT.",
            "_to": "The new owner.",
            "_tokenId": "The NFT to transfer."
          }
        }
      }
    },
    "evm": {
      "assembly": "",
      "bytecode": {
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "deployedBytecode": {
        "linkReferences": {},
        "object": "",
        "opcodes": "",
        "sourceMap": ""
      },
      "gasEstimates": null,
      "legacyAssembly": null,
      "methodIdentifiers": {
        "approve(address,uint256)": "095ea7b3",
        "balanceOf(address)": "70a08231",
        "getApproved(uint256)": "081812fc",
        "isApprovedForAll(address,address)": "e985e9c5",
        "ownerOf(uint256)": "6352211e",
        "safeTransferFrom(address,address,uint256)": "42842e0e",
        "safeTransferFrom(address,address,uint256,bytes)": "b88d4fde",
        "setApprovalForAll(address,bool)": "a22cb465",
        "transferFrom(address,address,uint256)": "23b872dd"
      }
    },
    "metadata": {
      "compiler": {
        "version": "0.5.6+commit.b259423e"
      },
      "language": "Solidity",
      "output": {
        "abi": [
          {
            "constant": true,
            "inputs": [
              {
                "name": "_tokenId",
                "type": "uint256"
              }
            ],
            "name": "getApproved",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_approved",
                "type": "address"
              },
              {
                "name": "_tokenId",
                "type": "uint256"
              }
            ],
            "name": "approve",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_tokenId",
                "type": "uint256"
              }
            ],
            "name": "transferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_tokenId",
                "type": "uint256"
              }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_tokenId",
                "type": "uint256"
              }
            ],
            "name": "ownerOf",
            "outputs": [
              {
                "name": "",
                "type": "address"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              }
            ],
            "name": "balanceOf",
            "outputs": [
              {
                "name": "",
                "type": "uint256"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_operator",
                "type": "address"
              },
              {
                "name": "_approved",
                "type": "bool"
              }
            ],
            "name": "setApprovalForAll",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": false,
            "inputs": [
              {
                "name": "_from",
                "type": "address"
              },
              {
                "name": "_to",
                "type": "address"
              },
              {
                "name": "_tokenId",
                "type": "uint256"
              },
              {
                "name": "_data",
                "type": "bytes"
              }
            ],
            "name": "safeTransferFrom",
            "outputs": [],
            "payable": false,
            "stateMutability": "nonpayable",
            "type": "function"
          },
          {
            "constant": true,
            "inputs": [
              {
                "name": "_owner",
                "type": "address"
              },
              {
                "name": "_operator",
                "type": "address"
              }
            ],
            "name": "isApprovedForAll",
            "outputs": [
              {
                "name": "",
                "type": "bool"
              }
            ],
            "payable": false,
            "stateMutability": "view",
            "type": "function"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_from",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_to",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_tokenId",
                "type": "uint256"
              }
            ],
            "name": "Transfer",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_owner",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_approved",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_tokenId",
                "type": "uint256"
              }
            ],
            "name": "Approval",
            "type": "event"
          },
          {
            "anonymous": false,
            "inputs": [
              {
                "indexed": true,
                "name": "_owner",
                "type": "address"
              },
              {
                "indexed": true,
                "name": "_operator",
                "type": "address"
              },
              {
                "indexed": false,
                "name": "_approved",
                "type": "bool"
              }
            ],
            "name": "ApprovalForAll",
            "type": "event"
          }
        ],
        "devdoc": {
          "details": "ERC-721 non-fungible token standard.  See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md.",
          "methods": {
            "approve(address,uint256)": {
              "details": "Set or reaffirm the approved address for an NFT.",
              "params": {
                "_approved": "The new approved NFT controller.",
                "_tokenId": "The NFT to approve."
              }
            },
            "balanceOf(address)": {
              "details": "Returns the number of NFTs owned by `_owner`. NFTs assigned to the zero address are considered invalid, and this function throws for queries about the zero address.",
              "params": {
                "_owner": "Address for whom to query the balance."
              },
              "return": "Balance of _owner."
            },
            "getApproved(uint256)": {
              "details": "Get the approved address for a single NFT.",
              "params": {
                "_tokenId": "The NFT to find the approved address for."
              },
              "return": "Address that _tokenId is approved for. "
            },
            "isApprovedForAll(address,address)": {
              "details": "Returns true if `_operator` is an approved operator for `_owner`, false otherwise.",
              "params": {
                "_operator": "The address that acts on behalf of the owner.",
                "_owner": "The address that owns the NFTs."
              },
              "return": "True if approved for all, false otherwise."
            },
            "ownerOf(uint256)": {
              "details": "Returns the address of the owner of the NFT. NFTs assigned to zero address are considered invalid, and queries about them do throw.",
              "params": {
                "_tokenId": "The identifier for an NFT."
              },
              "return": "Address of _tokenId owner."
            },
            "safeTransferFrom(address,address,uint256)": {
              "details": "Transfers the ownership of an NFT from one address to another address.",
              "params": {
                "_from": "The current owner of the NFT.",
                "_to": "The new owner.",
                "_tokenId": "The NFT to transfer."
              }
            },
            "safeTransferFrom(address,address,uint256,bytes)": {
              "details": "Transfers the ownership of an NFT from one address to another address.",
              "params": {
                "_data": "Additional data with no specified format, sent in call to `_to`.",
                "_from": "The current owner of the NFT.",
                "_to": "The new owner.",
                "_tokenId": "The NFT to transfer."
              }
            },
            "setApprovalForAll(address,bool)": {
              "details": "Enables or disables approval for a third party (\"operator\") to manage all of `msg.sender`'s assets. It also emits the ApprovalForAll event.",
              "params": {
                "_approved": "True if the operators is approved, false to revoke approval.",
                "_operator": "Address to add to the set of authorized operators."
              }
            },
            "transferFrom(address,address,uint256)": {
              "details": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT.",
              "params": {
                "_from": "The current owner of the NFT.",
                "_to": "The new owner.",
                "_tokenId": "The NFT to transfer."
              }
            }
          }
        },
        "userdoc": {
          "methods": {
            "approve(address,uint256)": {
              "notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."
            },
            "getApproved(uint256)": {
              "notice": "Throws if `_tokenId` is not a valid NFT."
            },
            "safeTransferFrom(address,address,uint256)": {
              "notice": "This works identically to the other function with an extra data parameter, except this function just sets data to \"\""
            },
            "safeTransferFrom(address,address,uint256,bytes)": {
              "notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."
            },
            "setApprovalForAll(address,bool)": {
              "notice": "The contract MUST allow multiple operators per owner."
            },
            "transferFrom(address,address,uint256)": {
              "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they mayb be permanently lost."
            }
          }
        }
      },
      "settings": {
        "compilationTarget": {
          "./src/contracts/tokens/erc721.sol": "ERC721"
        },
        "evmVersion": "byzantium",
        "libraries": {},
        "optimizer": {
          "enabled": false,
          "runs": 200
        },
        "remappings": []
      },
      "sources": {
        "./src/contracts/tokens/erc721.sol": {
          "keccak256": "0x16ef833eea7b2363ee4c8497aab83ee5fd1d013ced37de887183ec1cebdd0f3f",
          "urls": [
            "bzzr://ac8a0c9a941c6e58b6a125832c2d36e71afbee27472b02f36f7405d8c6a6f975"
          ]
        }
      },
      "version": 1
    },
    "userdoc": {
      "methods": {
        "approve(address,uint256)": {
          "notice": "The zero address indicates there is no approved address. Throws unless `msg.sender` is the current NFT owner, or an authorized operator of the current owner."
        },
        "getApproved(uint256)": {
          "notice": "Throws if `_tokenId` is not a valid NFT."
        },
        "safeTransferFrom(address,address,uint256)": {
          "notice": "This works identically to the other function with an extra data parameter, except this function just sets data to \"\""
        },
        "safeTransferFrom(address,address,uint256,bytes)": {
          "notice": "Throws unless `msg.sender` is the current owner, an authorized operator, or the approved address for this NFT. Throws if `_from` is not the current owner. Throws if `_to` is the zero address. Throws if `_tokenId` is not a valid NFT. When transfer is complete, this function checks if `_to` is a smart contract (code size > 0). If so, it calls `onERC721Received` on `_to` and throws if the return value is not  `bytes4(keccak256(\"onERC721Received(address,uint256,bytes)\"))`."
        },
        "setApprovalForAll(address,bool)": {
          "notice": "The contract MUST allow multiple operators per owner."
        },
        "transferFrom(address,address,uint256)": {
          "notice": "The caller is responsible to confirm that `_to` is capable of receiving NFTs or else they mayb be permanently lost."
        }
      }
    }
  }
}